import telebot
import time
import traceback
import signal
import sys
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
import settings

bot = telebot.TeleBot(settings.API_KEY)

user_data = {}

EXPENSE_CATEGORIES = [
    "üçè –ü—Ä–æ–¥—É–∫—Ç—ã",
    "üçΩÔ∏è –ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
    "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
    "üè† –ñ–∏–ª—å–µ",
    "üè• –ó–¥–æ—Ä–æ–≤—å–µ",
    "üé≠ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "üì¶ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
]

INCOME_CATEGORIES = [
    "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞",
    "üéÅ –ü–æ–¥–∞—Ä–∫–∏",
    "üéì –°—Ç–∏–ø–µ–Ω–¥–∏—è / –ü–µ–Ω—Å–∏—è",
    "üì• –ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã"
]

def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.row("–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
    keyboard.row("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    return keyboard

def create_expense_categories_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(*EXPENSE_CATEGORIES)
    return keyboard

def create_income_categories_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(*INCOME_CATEGORIES)
    return keyboard

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_data[user_id] = {
        "incomes": [],  # –§–æ—Ä–º–∞—Ç: {"amount": 100, "category": "–ó–∞—Ä–ø–ª–∞—Ç–∞", "date": "2023-01-01"}
        "expenses": []  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    }
    
    bot.send_message(
        user_id,
        "üí∞ *–¢—Ä–µ–∫–µ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard(),
        parse_mode="Markdown"
    )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    text = message.text

    if text == "–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥":
        msg = bot.send_message(
            user_id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", 
            reply_markup=create_income_categories_keyboard()
        )
        bot.register_next_step_handler(msg, process_income_category_step)
    
    elif text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥":
        msg = bot.send_message(
            user_id, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", 
            reply_markup=create_expense_categories_keyboard()
        )
        bot.register_next_step_handler(msg, process_expense_category_step)
    
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        show_statistics(user_id)
    
    elif text in EXPENSE_CATEGORIES or text in INCOME_CATEGORIES:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        bot.send_message(
            user_id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥' –∏–ª–∏ '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥'",
            reply_markup=create_main_keyboard()
        )

def process_income_category_step(message):
    user_id = message.from_user.id
    category = message.text
    
    if category not in INCOME_CATEGORIES:
        bot.send_message(
            user_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
            reply_markup=create_income_categories_keyboard()
        )
        bot.register_next_step_handler(message, process_income_category_step)
        return
    
    user_data[user_id]["temp_income_category"] = category
    msg = bot.send_message(
        user_id,
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞ ({category}):",
        reply_markup=ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_income_amount_step)

def process_income_amount_step(message):
    try:
        amount = float(message.text)
        user_id = message.from_user.id
        
        if user_id not in user_data:
            user_data[user_id] = {"incomes": [], "expenses": []}
            
        category = user_data[user_id].get("temp_income_category", "–ü—Ä–æ—á–∏–µ –¥–æ—Ö–æ–¥—ã")
        user_data[user_id]["incomes"].append({
            "amount": amount,
            "category": category.replace("üì• ", "").replace("üí∞ ", "").strip(),
            "date": message.date  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞—Ç—ã
        })
        
        bot.send_message(
            user_id,
            f"‚úÖ –î–æ—Ö–æ–¥ +{amount} ({category}) –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=create_main_keyboard()
        )
        
        if "temp_income_category" in user_data[user_id]:
            del user_data[user_id]["temp_income_category"]
            
    except ValueError:
        msg = bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(msg, process_income_amount_step)

def process_expense_category_step(message):
    user_id = message.from_user.id
    category = message.text
    
    if category not in EXPENSE_CATEGORIES:
        bot.send_message(
            user_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
            reply_markup=create_expense_categories_keyboard()
        )
        bot.register_next_step_handler(message, process_expense_category_step)
        return
    
    user_data[user_id]["temp_expense_category"] = category
    msg = bot.send_message(
        user_id,
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ ({category}):",
        reply_markup=ReplyKeyboardRemove()
    )
    bot.register_next_step_handler(msg, process_expense_amount_step)

def process_expense_amount_step(message):
    try:
        amount = float(message.text)
        user_id = message.from_user.id
        
        if user_id not in user_data:
            user_data[user_id] = {"incomes": [], "expenses": []}
            
        category = user_data[user_id].get("temp_expense_category", "–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã")
        user_data[user_id]["expenses"].append({
            "amount": amount,
            "category": category.replace("üì¶ ", "").replace("üçè ", "").strip(),
            "date": message.date  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞—Ç—ã
        })
        
        bot.send_message(
            user_id,
            f"‚úÖ –†–∞—Å—Ö–æ–¥ -{amount} ({category}) –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=create_main_keyboard()
        )
        
        if "temp_expense_category" in user_data[user_id]:
            del user_data[user_id]["temp_expense_category"]
            
    except ValueError:
        msg = bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        bot.register_next_step_handler(msg, process_expense_amount_step)

def show_statistics(user_id):
    if user_id not in user_data:
        bot.send_message(user_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
        return

    incomes = user_data[user_id]["incomes"]
    expenses = user_data[user_id]["expenses"]
    
    total_income = sum(item["amount"] for item in incomes)
    total_expense = sum(item["amount"] for item in expenses)
    balance = total_income - total_expense

    expense_by_category = {}
    for expense in expenses:
        cat = expense["category"]
        expense_by_category[cat] = expense_by_category.get(cat, 0) + expense["amount"]

    expense_stats = "\n".join(
        f"‚Ä¢ {cat}: -{amount:.2f}" 
        for cat, amount in expense_by_category.items()
    )

    income_by_category = {}
    for income in incomes:
        cat = income["category"]
        income_by_category[cat] = income_by_category.get(cat, 0) + income["amount"]

    income_stats = "\n".join(
        f"‚Ä¢ {cat}: +{amount:.2f}" 
        for cat, amount in income_by_category.items()
    )

    stats = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"*–û–±—â–∏–π –¥–æ—Ö–æ–¥*: +{total_income:.2f}\n"
        f"*–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥*: -{total_expense:.2f}\n"
        f"*–ë–∞–ª–∞–Ω—Å*: {balance:.2f}\n\n"
        "üìà *–î–æ—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*:\n" + income_stats + "\n\n"
        "üìâ *–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*:\n" + expense_stats + "\n\n"
        f"–í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(incomes) + len(expenses)}"
    )
    
    bot.send_message(
        user_id, 
        stats, 
        parse_mode="Markdown", 
        reply_markup=create_main_keyboard()
    )

def signal_handler(sig, frame):
    print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    while True:
        try:
            bot.polling(none_stop=True, interval=1, timeout=20)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
            time.sleep(5)